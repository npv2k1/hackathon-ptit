/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Attest = ContractEventLog<{
  to: string;
  tokenId: string;
  0: string;
  1: string;
}>;
export type Burn = ContractEventLog<{
  from: string;
  tokenId: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IERC721Metadata extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IERC721Metadata;
  clone(): IERC721Metadata;
  methods: {
    attest(to: string): NonPayableTransactionObject<string>;

    balanceOf(owner: string): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    tokenURI(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    Attest(cb?: Callback<Attest>): EventEmitter;
    Attest(options?: EventOptions, cb?: Callback<Attest>): EventEmitter;

    Burn(cb?: Callback<Burn>): EventEmitter;
    Burn(options?: EventOptions, cb?: Callback<Burn>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Attest", cb: Callback<Attest>): void;
  once(event: "Attest", options: EventOptions, cb: Callback<Attest>): void;

  once(event: "Burn", cb: Callback<Burn>): void;
  once(event: "Burn", options: EventOptions, cb: Callback<Burn>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
